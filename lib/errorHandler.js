import config from '../config.js'

class ErrorHandler {
  constructor(sock) {
    this.sock = sock
  }

  async sendErrorToOwner(error, context = '') {
    try {
      const errorMessage = `üö® *ERROR EN EL BOT* üö®\n\n`
        + `‚è∞ *Fecha:* ${new Date().toLocaleString('es-ES')}\n`
        + `üìç *Contexto:* ${context || 'Error general'}\n`
        + `‚ùå *Error:* ${error.message || error}\n`
        + `üìÑ *Stack:* \`\`\`${error.stack || 'No disponible'}\`\`\`\n\n`
        + `üîß *Recomendaci√≥n:* Revisar logs y reiniciar si es necesario.`

      await this.sock.sendMessage(config.ownerNumber, {
        text: errorMessage
      })
    } catch (sendError) {
      console.error('‚ùå Error enviando notificaci√≥n al owner:', sendError.message)
    }
  }

  async handleCommandError(error, command, msg, args) {
    const context = `Comando: ${command} | Usuario: ${msg.key.remoteJid} | Args: ${args.join(' ')}`
    
    // Enviar error al owner
    await this.sendErrorToOwner(error, context)
    
    // Enviar mensaje gen√©rico al usuario
    try {
      await this.sock.sendMessage(msg.key.remoteJid, {
        text: '‚ùå Ocurri√≥ un error inesperado. El propietario del bot ha sido notificado autom√°ticamente.'
      })
    } catch (userError) {
      console.error('‚ùå Error enviando mensaje al usuario:', userError.message)
    }
  }

  async handleSystemError(error, context) {
    await this.sendErrorToOwner(error, `Sistema: ${context}`)
  }
}

export default ErrorHandler